apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ template "fullname" . }}-master
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    component: {{ template "fullname" . }}-master
    role: master
spec:
  serviceName: {{ template "fullname" . }}-master
  replicas: {{ .Values.master.replicas }}
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      component: {{ template "fullname" . }}
      role: master
  template:
    metadata:
      labels:
        release: "{{ .Release.Name }}"
        app: {{ template "fullname" . }}
        component: {{ template "fullname" . }}
        role: master
        {{- if .Values.master.labels }}
{{ toYaml .Values.master.labels | indent 8 }}
        {{- end }}
      {{- if .Values.master.annotations }}
      annotations:
{{ toYaml .Values.master.annotations | indent 8 }}
      {{- end }}
    spec:
      subdomain: {{ template "fullname" . }}
      serviceAccountName: {{ template "fullname" . }}
      securityContext:
        fsGroup: 1000
      {{- if eq .Values.master.antiAffinity "hard" }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "failure-domain.beta.kubernetes.io/zone"
              labelSelector:
                matchLabels:
                  component: {{ template "fullname" . }}
                  role: master
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  component: {{ template "fullname" . }}
                  role: master
      {{- else if eq .Values.master.antiAffinity "soft" }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: "failure-domain.beta.kubernetes.io/zone"
              labelSelector:
                matchLabels:
                  component: {{ template "fullname" . }}
                  role: master
          - weight: 2
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  component: {{ template "fullname" . }}
                  role: master
      {{- end }}
      initContainers:
{{ include "init-containers" . | indent 6 }}
      containers:
      - name: elasticsearch
        securityContext:
          capabilities:
            add:
              - IPC_LOCK
              - SYS_RESOURCE
        image: "{{ .Values.common.image.repository }}:{{ .Values.common.image.tag }}"
        imagePullPolicy: {{ .Values.common.image.pullPolicy }}
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: DISCOVERY_SERVICE
          value: {{ template "fullname" . }}-discovery.{{ .Release.Namespace }}.svc.{{ .Values.tls.clusterDomain }}
        - name: ES_JAVA_OPTS
          value: "-Djava.net.preferIPv4Stack=true -Xms{{ .Values.master.heapSize }} -Xmx{{ .Values.master.heapSize }}"
        - name: NODE_DATA
          value: "false"
        - name: NODE_MASTER
          value: "true"
        - name: NODE_INGEST
          value: "false"
        - name: HTTP_ENABLE
          value: "{{ .Values.master.enableHTTP }}"
        - name: PROCESSORS
          value: "{{ .Values.master.processors }}"
        {{- range $key, $value :=  .Values.common.env }}
        - name: {{ $key | upper | replace "-" "_" }}
          value: {{ $value | quote }}
        {{- end }}
        {{- range $key, $value :=  .Values.master.env }}
        - name: {{ $key | upper | replace "-" "_" }}
          value: {{ $value | quote }}
        {{- end }}
        resources:
{{ toYaml .Values.master.resources | indent 10 }}
        ports:
        - containerPort: 9300
          name: transport
          protocol: TCP
        {{- if .Values.master.enableHTTP }}
        - containerPort: 9200
          name: http
          protocol: TCP
        {{- end }}
        readinessProbe:
          {{- if and .Values.master.enableHTTP (not .Values.searchguard.enable) -}}
          {{/* We cannot use http readinessProbe for searchguard since it requires client cert auth */}}
          httpGet:
            path: /_cluster/health?local=true
            port: http
            {{- if .Values.tls.enable }}
            scheme: HTTPS
            {{- end }}
          {{- else }}
          tcpSocket:
            port: transport
          {{- end }}
        {{- if .Values.minikube }}
          initialDelaySeconds: 20
          periodSeconds: 10
          failureThreshold: 90
        {{- else }}
          initialDelaySeconds: 50
          periodSeconds: 10
          failureThreshold: 30
        {{- end }}
        livenessProbe:
          tcpSocket:
            port: transport
        {{- if .Values.minikube }}
          initialDelaySeconds: 60
          periodSeconds: 10
          failureThreshold: 90
        {{- else }}
          initialDelaySeconds: 60
          periodSeconds: 10
        {{- end }}
        resources:
{{ toYaml .Values.master.resources | indent 10 }}
        volumeMounts:
        {{- if .Values.common.plugins }}
        - mountPath: /usr/share/elasticsearch/config/
          name: configdir
        - mountPath: /usr/share/elasticsearch/plugins/
          name: plugindir
        {{- end }}
        {{- if .Values.tls.enable }}
        - mountPath: /usr/share/elasticsearch/config/tls/
          name: tls
          readOnly: true
        {{- end }}
        - mountPath: /storage/
          name: storage
        - mountPath: /usr/share/elasticsearch/config/jvm.options
          name: config
          subPath: jvm.options
        - mountPath: /usr/share/elasticsearch/config/log4j2.properties
          name: config
          subPath: log4j2.properties
        - mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
          name: config
          subPath: elasticsearch.yml
        {{- if .Values.searchguard.enable }}
        - mountPath: /usr/share/elasticsearch/plugins/search-guard-6/sgconfig/
          name: searchguard-config
        {{- end }}
      volumes:
        {{- if .Values.common.plugins }}
        - name: configdir
          emptyDir: {}
        - name: plugindir
          emptyDir: {}
        {{- end }}
        {{- if .Values.tls.enable }}
        - name: tls
          emptyDir: {}
        {{- end }}
        - configMap:
            name: {{ template "fullname" . }}-config
          name: config
        {{- if .Values.searchguard.enable }}
        - configMap:
            name: {{ template "fullname" . }}-searchguard-config
          name: searchguard-config
        {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ .Values.master.storageClass }}
      resources:
        requests:
          storage: {{ .Values.master.storage }}
